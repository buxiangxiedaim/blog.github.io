<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>开塞露加冰的博客</title>
  
  
  <link href="https://kaisailu-with-ice.gitee.io/blog/atom.xml" rel="self"/>
  
  <link href="https://kaisailu-with-ice.gitee.io/blog/"/>
  <updated>2022-11-11T01:43:07.810Z</updated>
  <id>https://kaisailu-with-ice.gitee.io/blog/</id>
  
  <author>
    <name>张尹</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Socket.IO实现聊天室</title>
    <link href="https://kaisailu-with-ice.gitee.io/blog/2022/11/11/readme/"/>
    <id>https://kaisailu-with-ice.gitee.io/blog/2022/11/11/readme/</id>
    <published>2022-11-11T01:28:38.828Z</published>
    <updated>2022-11-11T01:43:07.810Z</updated>
    
    <content type="html"><![CDATA[<p>学习Socket.IO的过程中制作了一个实时聊天室demo，本文记录一下主要实现代码和主要功能遇到的困难 </p><h3 id="客户端主要代码"><a href="#客户端主要代码" class="headerlink" title="客户端主要代码"></a>客户端主要代码</h3><p>客户端最基础的两个功能：使用socket.emit()发送命令，socket.on()接收数据</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, { useState, useEffect, useRef } <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> io <span class="keyword">from</span> <span class="string">'socket.io-client'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> socket = <span class="title function_">io</span>(<span class="variable language_">window</span>.<span class="property">_CONFIG</span>[<span class="string">"socketUrl"</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Home</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [userInfo, setUserInfo] = <span class="title function_">useState</span>({<span class="attr">city</span>:<span class="string">''</span>,<span class="attr">ip</span>:<span class="string">''</span>})</span><br><span class="line">  <span class="keyword">const</span> [inputVal, setInputVal] = <span class="title function_">useState</span>(<span class="string">''</span>)  <span class="comment">//input输入值</span></span><br><span class="line">  <span class="keyword">const</span> [msgList, setMsgList ] = <span class="title function_">useState</span>([])   <span class="comment">//消息列表</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">  <span class="comment">// console.log(inputRef.current);</span></span><br><span class="line">    socket.<span class="title function_">on</span>(<span class="string">'info'</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> {         <span class="comment">//单条信息事件</span></span><br><span class="line">      <span class="title function_">setMsgList</span>([...msgList,data])</span><br><span class="line">    });</span><br><span class="line">    socket.<span class="title function_">on</span>(<span class="string">'response_msg'</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> { <span class="comment">//历史信息事件</span></span><br><span class="line">      <span class="title function_">setMsgList</span>([...data])</span><br><span class="line">    });</span><br><span class="line">  }, [msgList]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取历史消息</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getHistoryMsg</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">    socket.<span class="title function_">emit</span>(<span class="string">'getHistory'</span>, <span class="string">'点击获取历史记录'</span>)</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 提交消息</span></span><br><span class="line">  <span class="keyword">const</span> submit = <span class="title function_">useThrottle</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">    <span class="keyword">const</span> newVal = inputVal.<span class="title function_">trim</span>()</span><br><span class="line">    <span class="keyword">if</span>(!newVal){</span><br><span class="line">      <span class="keyword">return</span> message.<span class="title function_">info</span>(<span class="string">'消息不可为空'</span>)</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">let</span> params = {</span><br><span class="line">      <span class="attr">id</span>:<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>(),</span><br><span class="line">      <span class="attr">date</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleDateString</span>() + <span class="string">' '</span> + <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleTimeString</span>(),</span><br><span class="line">      <span class="attr">message</span>: inputVal,</span><br><span class="line">    }</span><br><span class="line">    socket.<span class="title function_">emit</span>(<span class="string">'submit'</span>, params)</span><br><span class="line">  },<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 键盘事件</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">inputKeyDown</span> = (<span class="params">e</span>) =&gt; {</span><br><span class="line">    <span class="comment">// 当按下回车键</span></span><br><span class="line">    <span class="keyword">if</span>(e.<span class="property">keyCode</span> === <span class="number">13</span>){</span><br><span class="line">      e.<span class="title function_">preventDefault</span>();</span><br><span class="line">      <span class="title function_">submit</span>()</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Home</span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="后台主要代码"><a href="#后台主要代码" class="headerlink" title="后台主要代码"></a>后台主要代码</h3><p>后台当客户端连接成功后，对两个事件进行监听，并作出相应操作。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="built_in">require</span>(<span class="string">'express'</span>)();</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>).<span class="title class_">Server</span>(app);<span class="comment">//这里必须绑定在http实例上而不是app上</span></span><br><span class="line"><span class="keyword">const</span> io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)(http, { <span class="attr">cors</span>: <span class="literal">true</span> });  <span class="comment">//1.解决跨域</span></span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> db = mysql.<span class="title function_">createPool</span>({</span><br><span class="line">  host     : <span class="string">'localhost'</span>,</span><br><span class="line">  user     : <span class="string">'root'</span>,</span><br><span class="line">  password : <span class="string">'123456'</span>,</span><br><span class="line">  database : <span class="string">'demo'</span></span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">io.<span class="title function_">on</span>(<span class="string">'connection'</span>, <span class="keyword">function</span> (<span class="params">socket</span>) {</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当客户端提交消息</span></span><br><span class="line">  socket.<span class="title function_">on</span>(<span class="string">'submit'</span>, <span class="keyword">function</span> (<span class="params">data</span>){</span><br><span class="line">    <span class="comment">// 将收到的消息发给客户端</span></span><br><span class="line">    io.<span class="title function_">emit</span>(<span class="string">'info'</span>, data)</span><br><span class="line">    <span class="comment">// 将收到的消息插入数据库</span></span><br><span class="line">    <span class="keyword">const</span> { date, message } = data</span><br><span class="line">    db.<span class="title function_">query</span>(<span class="string">'INSERT INTO chats (date, message) VALUES (?, ?)'</span>,[date, message], <span class="function">(<span class="params">err, res</span>) =&gt;</span> {</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'数据插入成功！'</span>);</span><br><span class="line">    })</span><br><span class="line">  });</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当客户端请求历史消息</span></span><br><span class="line">  socket.<span class="title function_">on</span>(<span class="string">'getHistory'</span>, <span class="keyword">function</span> (<span class="params">data</span>){</span><br><span class="line">    db.<span class="title function_">query</span>(<span class="string">'SELECT * FROM chats'</span>, <span class="keyword">function</span> (<span class="params">error, results, fields</span>) {</span><br><span class="line">      <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">      <span class="keyword">let</span> result = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(results))</span><br><span class="line">      <span class="comment">// 将查询到的消息发送给客户端</span></span><br><span class="line">      socket.<span class="title function_">emit</span>(<span class="string">'response_msg'</span>,result)</span><br><span class="line">    });</span><br><span class="line">  })</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">http.<span class="title function_">listen</span>(<span class="number">9000</span>, <span class="function">() =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'监听端口:9000'</span>);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h3 id="客户端和后端依赖不同"><a href="#客户端和后端依赖不同" class="headerlink" title="客户端和后端依赖不同"></a>客户端和后端依赖不同</h3><p>客户端使用的是socket.io-client，而后台使用的是socket.io</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install socket.io-client  //前台依赖</span><br><span class="line">npm install socket.io         //后台依赖</span><br></pre></td></tr></tbody></table></figure><h3 id="同步在线人数功能代码"><a href="#同步在线人数功能代码" class="headerlink" title="同步在线人数功能代码"></a>同步在线人数功能代码</h3><p>同步在线人数主要的实现思路是，后台声明一个变量num，当连接成功时+1，断开连接时-1，并将变量发送给客户端</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">io.<span class="title function_">on</span>(<span class="string">'connection'</span>, <span class="keyword">function</span> (<span class="params">socket</span>) {</span><br><span class="line">  num++</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'已连接'</span>);</span><br><span class="line">  io.<span class="title function_">emit</span>(<span class="string">'num_change'</span>, num)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 连接已断开</span></span><br><span class="line">  socket.<span class="title function_">on</span>(<span class="string">'disconnect'</span>, <span class="function">() =&gt;</span> {</span><br><span class="line">    num--</span><br><span class="line">    io.<span class="title function_">emit</span>(<span class="string">'num_change'</span>, num)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'连接已断开...'</span>)</span><br><span class="line">  });</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>官方文档中是有socket.on(‘disconnect’, () =&gt; {})事件监听的，但是我这里使用始终不生效。</p><h3 id="获取用户ip属地功能代码"><a href="#获取用户ip属地功能代码" class="headerlink" title="获取用户ip属地功能代码"></a>获取用户ip属地功能代码</h3><p>主要使用<a href="http://pv.sohu.com/cityjson?ie=utf-8">http://pv.sohu.com/cityjson?ie=utf-8</a> 这个api</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先在proxy中配置代理</span></span><br><span class="line"><span class="string">'/apiSohu'</span>: {</span><br><span class="line">  <span class="attr">target</span>: <span class="string">'http://pv.sohu.com'</span>, <span class="comment">// localhost=&gt;target</span></span><br><span class="line">  <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">pathRewrite</span>: {</span><br><span class="line">  <span class="string">'^/apiSohu/'</span>: <span class="string">'/'</span></span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 其次使用axios进行请求</span></span><br><span class="line"><span class="attr">userCity</span>: <span class="string">`<span class="subst">${apiSohu}</span>/cityjson?ie=utf-8`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">getUserInfo</span>(<span class="params">data</span>){</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="variable language_">this</span>.$http({</span><br><span class="line">    url : userCity,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">"get"</span>,</span><br><span class="line">    data,</span><br><span class="line">  })</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.$handleResponse(response)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">  <span class="title function_">getUserInfo</span>()</span><br><span class="line">},[])</span><br></pre></td></tr></tbody></table></figure><h3 id="消息颜色功能代码"><a href="#消息颜色功能代码" class="headerlink" title="消息颜色功能代码"></a>消息颜色功能代码</h3><p>取色器功能相对后台比较简单，只是增加了一个color字段而已。重点在于HTML5自带取色器，之前确实不清楚。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [color, setColor] = <span class="title function_">useState</span>(<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">colorChange</span> = e =&gt; {</span><br><span class="line">  <span class="title function_">setColor</span>(e.<span class="property">target</span>.<span class="property">value</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">&lt;input type=<span class="string">"color"</span> value={color} onChange={colorChange}/&gt;</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;学习Socket.IO的过程中制作了一个实时聊天室demo，本文记录一下主要实现代码和主要功能遇到的困难 &lt;/p&gt;
&lt;h3 id=&quot;客户端主要代码&quot;&gt;&lt;a href=&quot;#客户端主要代码&quot; class=&quot;headerlink&quot; title=&quot;客户端主要代码&quot;&gt;&lt;/a&gt;客户端主</summary>
      
    
    
    
    <category term="my_project" scheme="https://kaisailu-with-ice.gitee.io/blog/categories/my-project/"/>
    
    
    <category term="Socket.IO" scheme="https://kaisailu-with-ice.gitee.io/blog/tags/Socket-IO/"/>
    
  </entry>
  
  <entry>
    <title>分页上传</title>
    <link href="https://kaisailu-with-ice.gitee.io/blog/2022/11/08/%E5%88%86%E9%A1%B5%E4%B8%8A%E4%BC%A0/"/>
    <id>https://kaisailu-with-ice.gitee.io/blog/2022/11/08/%E5%88%86%E9%A1%B5%E4%B8%8A%E4%BC%A0/</id>
    <published>2022-11-08T06:34:00.384Z</published>
    <updated>2022-11-08T08:17:56.038Z</updated>
    
    <content type="html"><![CDATA[<h3 id="功能目的："><a href="#功能目的：" class="headerlink" title="功能目的："></a>功能目的：</h3><p>1.对文件进行切片上传，使得每个接口响应时间缩短；<br>2.控制请求并发量，避免请求过多导致页面崩溃；<br>3.当部分请求失败，将失败的部分重新上传。</p><h4 id="一-切片上传："><a href="#一-切片上传：" class="headerlink" title="一.切片上传："></a>一.切片上传：</h4><p>1.使用FileReader接口提供的readAsArrayBuffer()读取file中的内容；2.使用SparkMD5存放读取出的ArrayBuffer对象；3.使用文件file对象的slice()方法进行切片。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">SparkMD5</span> <span class="keyword">from</span> <span class="string">'spark-md5'</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Home</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">  axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">'http://20.46.4.225:8080/study/common'</span>  <span class="comment">// 请求基准地址</span></span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">CHUNK_SIZE</span> = <span class="number">1024</span> * <span class="number">10</span>; <span class="comment">//10KB</span></span><br><span class="line">  <span class="keyword">const</span> fileChunkList = []  <span class="comment">//存放文件切片</span></span><br><span class="line">  <span class="keyword">let</span> file = {}   <span class="comment">//文件</span></span><br><span class="line">  <span class="keyword">let</span> hash = <span class="string">""</span>   <span class="comment">//文件hash</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">change</span> = e =&gt; {</span><br><span class="line">    file = e.<span class="property">target</span>.<span class="property">files</span>[<span class="number">0</span>]</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">upload</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">    <span class="comment">// 1.计算文件hash值</span></span><br><span class="line">    <span class="title function_">calculateFileHash</span>(file)</span><br><span class="line">    <span class="comment">// 2.将文件名、hash、文件大小调用接口</span></span><br><span class="line">    .<span class="title function_">then</span>(<span class="keyword">async</span> res =&gt; {</span><br><span class="line">      hash = res</span><br><span class="line">      <span class="keyword">const</span> params = {</span><br><span class="line">        <span class="attr">filename</span>: file.<span class="property">name</span>,</span><br><span class="line">        <span class="attr">hash</span>: res,</span><br><span class="line">        <span class="attr">length</span>: file.<span class="property">size</span>,</span><br><span class="line">      };</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">axios</span>({</span><br><span class="line">        <span class="attr">method</span>: <span class="string">'post'</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">'/chunk/info'</span>,</span><br><span class="line">        <span class="attr">data</span>: params</span><br><span class="line">      })</span><br><span class="line">    })</span><br><span class="line">    .<span class="title function_">then</span>(<span class="keyword">async</span> res =&gt; {</span><br><span class="line">      <span class="comment">// 3.将文件切片</span></span><br><span class="line">      <span class="title function_">fileChunk</span>(file)</span><br><span class="line">      <span class="comment">// 4.将切片后的文件遍历上传</span></span><br><span class="line">      <span class="keyword">const</span> uploadList = fileChunkList.<span class="title function_">map</span>( <span class="function"><span class="params">v</span> =&gt;</span> {</span><br><span class="line">        <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">        formData.<span class="title function_">append</span>(<span class="string">'chunkCount'</span>, fileChunkList.<span class="property">length</span>);</span><br><span class="line">        formData.<span class="title function_">append</span>(<span class="string">'chunkIndex'</span>, v.<span class="property">chunkIndex</span>);</span><br><span class="line">        formData.<span class="title function_">append</span>(<span class="string">'chunkSize'</span>, v.<span class="property">chunkSize</span>);</span><br><span class="line">        formData.<span class="title function_">append</span>(<span class="string">'fileHash'</span>, hash);</span><br><span class="line">        formData.<span class="title function_">append</span>(<span class="string">'path'</span>, res.<span class="property">path</span>);</span><br><span class="line">        formData.<span class="title function_">append</span>(<span class="string">'file'</span>, v.<span class="property">chunk</span>);</span><br><span class="line">        formData.<span class="title function_">append</span>(<span class="string">'everySize'</span>, <span class="variable constant_">CHUNK_SIZE</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">axios</span>({</span><br><span class="line">          <span class="attr">method</span>: <span class="string">'post'</span>,</span><br><span class="line">          <span class="attr">url</span>: <span class="string">'/chunk/upload'</span>,</span><br><span class="line">          <span class="attr">data</span>: formData,</span><br><span class="line">          <span class="attr">headers</span>: {</span><br><span class="line">            <span class="string">'Content-Type'</span>: <span class="string">'multipart/form-data'</span></span><br><span class="line">          }</span><br><span class="line">        })</span><br><span class="line">      })</span><br><span class="line">      <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(uploadList)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'已完成'</span>);</span><br><span class="line"></span><br><span class="line">    }) </span><br><span class="line">  };</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">calculateFileHash</span> = (<span class="params">file</span>) =&gt; {</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">      <span class="keyword">const</span> fileReader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">      <span class="keyword">const</span> spark = <span class="keyword">new</span> <span class="title class_">SparkMD5</span>.<span class="title class_">ArrayBuffer</span>();</span><br><span class="line"></span><br><span class="line">      fileReader.<span class="title function_">readAsArrayBuffer</span>(file);</span><br><span class="line"></span><br><span class="line">      fileReader.<span class="property">onload</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> {</span><br><span class="line">        spark.<span class="title function_">append</span>(e.<span class="property">target</span>.<span class="property">result</span>);</span><br><span class="line">        <span class="title function_">resolve</span>(spark.<span class="title function_">end</span>());</span><br><span class="line">      };</span><br><span class="line">    });</span><br><span class="line">  };</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">fileChunk</span> = (<span class="params">file</span>) =&gt; {</span><br><span class="line">    <span class="keyword">let</span> cur = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (cur &lt; file.<span class="property">size</span>) {</span><br><span class="line">      fileChunkList.<span class="title function_">push</span>({</span><br><span class="line">        <span class="attr">chunkIndex</span>: index,</span><br><span class="line">        <span class="attr">chunk</span>: file.<span class="title function_">slice</span>(cur, cur + <span class="variable constant_">CHUNK_SIZE</span>),</span><br><span class="line">        <span class="attr">chunkSize</span>: file.<span class="title function_">slice</span>(cur, cur + <span class="variable constant_">CHUNK_SIZE</span>).<span class="property">size</span></span><br><span class="line">      })</span><br><span class="line">      cur += <span class="variable constant_">CHUNK_SIZE</span>;</span><br><span class="line">      index++</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">'home-page'</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"fileInput"</span> <span class="attr">onChange</span>=<span class="string">{change}/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"uploadBtn"</span> <span class="attr">onClick</span>=<span class="string">{upload}</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">};</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Home</span>;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="二-控制并发："><a href="#二-控制并发：" class="headerlink" title="二.控制并发："></a>二.控制并发：</h4><p>Promise.race()方法返回一个promise，当接收的某个promise状态发生改变，无论成功或失败，Promise.race()会返回这个状态。使用Promise.race()来控制并发量。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">upload</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">    <span class="comment">// 1.计算文件hash值</span></span><br><span class="line">    <span class="title function_">calculateFileHash</span>(file)</span><br><span class="line">    <span class="comment">// 2.将文件名、hash、文件大小调用接口</span></span><br><span class="line">    .<span class="title function_">then</span>(<span class="keyword">async</span> res =&gt; {</span><br><span class="line">      hash = res</span><br><span class="line">      <span class="keyword">const</span> params = {</span><br><span class="line">        <span class="attr">filename</span>: file.<span class="property">name</span>,</span><br><span class="line">        <span class="attr">hash</span>: res,</span><br><span class="line">        <span class="attr">length</span>: file.<span class="property">size</span>,</span><br><span class="line">      };</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">axios</span>({</span><br><span class="line">        <span class="attr">method</span>: <span class="string">'post'</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">'/chunk/info'</span>,</span><br><span class="line">        <span class="attr">data</span>: params</span><br><span class="line">      })</span><br><span class="line">    })</span><br><span class="line">    .<span class="title function_">then</span>(<span class="keyword">async</span> res =&gt; {</span><br><span class="line">      <span class="comment">// 3.将文件切片</span></span><br><span class="line">      <span class="title function_">fileChunk</span>(file)</span><br><span class="line">        </span><br><span class="line">      <span class="keyword">let</span> pond = [];  <span class="comment">//并发池</span></span><br><span class="line">      <span class="keyword">let</span> max = <span class="number">3</span><span class="comment">//最大并发量</span></span><br><span class="line">      <span class="comment">// 4.将切片后的文件遍历上传</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; fileChunkList.<span class="property">length</span>; i++) {</span><br><span class="line">        <span class="keyword">let</span> v = fileChunkList[i]</span><br><span class="line">        <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">        formData.<span class="title function_">append</span>(<span class="string">'chunkCount'</span>, fileChunkList.<span class="property">length</span>);</span><br><span class="line">        formData.<span class="title function_">append</span>(<span class="string">'chunkIndex'</span>, v.<span class="property">chunkIndex</span>);</span><br><span class="line">        formData.<span class="title function_">append</span>(<span class="string">'chunkSize'</span>, v.<span class="property">chunkSize</span>);</span><br><span class="line">        formData.<span class="title function_">append</span>(<span class="string">'fileHash'</span>, hash);</span><br><span class="line">        formData.<span class="title function_">append</span>(<span class="string">'path'</span>, res.<span class="property">path</span>);</span><br><span class="line">        formData.<span class="title function_">append</span>(<span class="string">'file'</span>, v.<span class="property">chunk</span>);</span><br><span class="line">        formData.<span class="title function_">append</span>(<span class="string">'everySize'</span>, <span class="variable constant_">CHUNK_SIZE</span>);</span><br><span class="line">        <span class="keyword">let</span> result =  <span class="title function_">axios</span>({</span><br><span class="line">          <span class="attr">method</span>: <span class="string">'post'</span>,</span><br><span class="line">          <span class="attr">url</span>: <span class="string">'/chunk/upload'</span>,</span><br><span class="line">          <span class="attr">data</span>: formData,</span><br><span class="line">          <span class="attr">headers</span>: {</span><br><span class="line">            <span class="string">'Content-Type'</span>: <span class="string">'multipart/form-data'</span></span><br><span class="line">          }</span><br><span class="line">        })</span><br><span class="line">        <span class="comment">// 5.将请求添加至并发池中</span></span><br><span class="line">        pond.<span class="title function_">push</span>(result)</span><br><span class="line">        result.<span class="title function_">then</span>( <span class="function"><span class="params">res</span> =&gt;</span> {</span><br><span class="line">          <span class="comment">// 6.当请求成功返回，将其从pond中删除</span></span><br><span class="line">          <span class="keyword">let</span> index = pond.<span class="title function_">findIndex</span>( <span class="function"><span class="params">i</span> =&gt;</span> i === result)</span><br><span class="line">          pond.<span class="title function_">splice</span>(index, <span class="number">1</span>)</span><br><span class="line">        })</span><br><span class="line">        <span class="comment">// 7.当并发值达到设定值</span></span><br><span class="line">        <span class="keyword">if</span>(pond.<span class="property">length</span> === max){</span><br><span class="line">          <span class="comment">//每当并发池跑完一个任务，就再塞入一个任务</span></span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'满了满了'</span>);</span><br><span class="line">          <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">race</span>(pond)</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'已完成'</span>);</span><br><span class="line">    }) </span><br><span class="line">  };</span><br></pre></td></tr></tbody></table></figure><h4 id="三-断点续传："><a href="#三-断点续传：" class="headerlink" title="三.断点续传："></a>三.断点续传：</h4><p>使用catch捕获失败的请求，在所有请求响应完毕后，将失败的请求重新进行处理。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">upload</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">    <span class="comment">// 1.计算文件hash值</span></span><br><span class="line">    <span class="title function_">calculateFileHash</span>(file)</span><br><span class="line">    <span class="comment">// 2.将文件名、hash、文件大小调用接口</span></span><br><span class="line">    .<span class="title function_">then</span>(<span class="keyword">async</span> res =&gt; {</span><br><span class="line">      hash = res</span><br><span class="line">      <span class="keyword">const</span> params = {</span><br><span class="line">        <span class="attr">filename</span>: file.<span class="property">name</span>,</span><br><span class="line">        <span class="attr">hash</span>: res,</span><br><span class="line">        <span class="attr">length</span>: file.<span class="property">size</span>,</span><br><span class="line">      };</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">axios</span>({</span><br><span class="line">        <span class="attr">method</span>: <span class="string">'post'</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">'/chunk/info'</span>,</span><br><span class="line">        <span class="attr">data</span>: params</span><br><span class="line">      })</span><br><span class="line">    })</span><br><span class="line">    .<span class="title function_">then</span>(<span class="keyword">async</span> res =&gt; {</span><br><span class="line">      <span class="comment">// 3.将文件切片</span></span><br><span class="line">      <span class="title function_">fileChunk</span>(file)</span><br><span class="line">        </span><br><span class="line">      <span class="keyword">let</span> pond = [];  <span class="comment">//并发池</span></span><br><span class="line">      <span class="keyword">let</span> max = <span class="number">3</span><span class="comment">//最大并发量</span></span><br><span class="line">      <span class="keyword">let</span> num = <span class="number">0</span>  <span class="comment">//成功上传的数量</span></span><br><span class="line">      <span class="keyword">let</span> failList = []   <span class="comment">//失败的列表</span></span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">uploadChunkList</span> = <span class="keyword">async</span> (<span class="params">list</span>) =&gt; {</span><br><span class="line">        <span class="comment">// // 4.将切片后的文件遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.<span class="property">length</span>; i++) {</span><br><span class="line">          <span class="keyword">let</span> v = list[i];</span><br><span class="line">          <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">          formData.<span class="title function_">append</span>(<span class="string">'chunkCount'</span>, list.<span class="property">length</span>);</span><br><span class="line">          formData.<span class="title function_">append</span>(<span class="string">'chunkIndex'</span>, v.<span class="property">chunkIndex</span>);</span><br><span class="line">          formData.<span class="title function_">append</span>(<span class="string">'chunkSize'</span>, v.<span class="property">chunkSize</span>);</span><br><span class="line">          formData.<span class="title function_">append</span>(<span class="string">'fileHash'</span>, hash);</span><br><span class="line">          formData.<span class="title function_">append</span>(<span class="string">'path'</span>, res.<span class="property">path</span>);</span><br><span class="line">          formData.<span class="title function_">append</span>(<span class="string">'file'</span>, v.<span class="property">chunk</span>);</span><br><span class="line">          formData.<span class="title function_">append</span>(<span class="string">'everySize'</span>, <span class="variable constant_">CHUNK_SIZE</span>);</span><br><span class="line">          <span class="keyword">let</span> result =  <span class="title function_">axios</span>({</span><br><span class="line">            <span class="attr">method</span>: <span class="string">'post'</span>,</span><br><span class="line">            <span class="attr">url</span>: <span class="string">'/chunk/upload'</span>,</span><br><span class="line">            <span class="attr">data</span>: formData,</span><br><span class="line">            <span class="attr">headers</span>: {</span><br><span class="line">              <span class="string">'Content-Type'</span>: <span class="string">'multipart/form-data'</span></span><br><span class="line">            }</span><br><span class="line">          })</span><br><span class="line">          <span class="comment">// 5.将请求添加至并发池中</span></span><br><span class="line">          pond.<span class="title function_">push</span>(result);</span><br><span class="line">          result.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">            <span class="comment">// 6.当请求成功返回，将其从pond中删除</span></span><br><span class="line">            <span class="keyword">let</span> index = pond.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">i</span>) =&gt;</span> i === result);</span><br><span class="line">            pond.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">          }).<span class="title function_">catch</span>( <span class="function">() =&gt;</span> {</span><br><span class="line">            <span class="comment">// 7.如果请求失败，将此切片保存</span></span><br><span class="line">            failList.<span class="title function_">push</span>(v)</span><br><span class="line">          }).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">            num++</span><br><span class="line">            <span class="comment">// 8.当所有请求完成，将失败的列表再次进行处理</span></span><br><span class="line">            <span class="keyword">if</span>(num === list.<span class="property">length</span>) {<span class="title function_">uploadChunkList</span>(failList)}</span><br><span class="line">          })</span><br><span class="line">          <span class="comment">// 当并发值达到设定值</span></span><br><span class="line">          <span class="keyword">if</span> (pond.<span class="property">length</span> === max) {</span><br><span class="line">            <span class="comment">//每当并发池跑完一个任务，就再塞入一个任务</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'满了满了'</span>);</span><br><span class="line">            <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">race</span>(pond);</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'已完成'</span>);</span><br><span class="line">        fileChunkList = [];</span><br><span class="line">      };</span><br><span class="line"></span><br><span class="line">      <span class="title function_">uploadChunkList</span>(fileChunkList)</span><br><span class="line">    }) </span><br><span class="line">  };</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;功能目的：&quot;&gt;&lt;a href=&quot;#功能目的：&quot; class=&quot;headerlink&quot; title=&quot;功能目的：&quot;&gt;&lt;/a&gt;功能目的：&lt;/h3&gt;&lt;p&gt;1.对文件进行切片上传，使得每个接口响应时间缩短；&lt;br&gt;2.控制请求并发量，避免请求过多导致页面崩溃；&lt;br&gt;3.</summary>
      
    
    
    
    <category term="基础业务 - 文章分类" scheme="https://kaisailu-with-ice.gitee.io/blog/categories/%E5%9F%BA%E7%A1%80%E4%B8%9A%E5%8A%A1-%E6%96%87%E7%AB%A0%E5%88%86%E7%B1%BB/"/>
    
    
    <category term="文件上传" scheme="https://kaisailu-with-ice.gitee.io/blog/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://kaisailu-with-ice.gitee.io/blog/2022/10/21/hello-world/"/>
    <id>https://kaisailu-with-ice.gitee.io/blog/2022/10/21/hello-world/</id>
    <published>2022-10-21T03:43:02.633Z</published>
    <updated>2022-10-25T03:44:51.746Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><p><span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="xxx - 文章分类" scheme="https://kaisailu-with-ice.gitee.io/blog/categories/xxx-%E6%96%87%E7%AB%A0%E5%88%86%E7%B1%BB/"/>
    
    
    <category term="sss" scheme="https://kaisailu-with-ice.gitee.io/blog/tags/sss/"/>
    
  </entry>
  
  <entry>
    <title>React使用less</title>
    <link href="https://kaisailu-with-ice.gitee.io/blog/2022/10/21/first-blog/"/>
    <id>https://kaisailu-with-ice.gitee.io/blog/2022/10/21/first-blog/</id>
    <published>2022-10-21T03:43:02.631Z</published>
    <updated>2022-10-25T06:02:20.386Z</updated>
    
    <content type="html"><![CDATA[<p>在使用 create-react-app 时发现不支持 less，需更手动更改。</p><h3 id="1、下载-less-less-loader"><a href="#1、下载-less-less-loader" class="headerlink" title="1、下载 less less-loader"></a>1、下载 less less-loader</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用npm</span></span><br><span class="line"> npm install less less-loader -D</span><br><span class="line"> <span class="comment">// 使用 yarn</span></span><br><span class="line"> yarn add less less-loader</span><br></pre></td></tr></tbody></table></figure><h3 id="2、配置-webpack-config-js"><a href="#2、配置-webpack-config-js" class="headerlink" title="2、配置 webpack.config.js"></a>2、配置 webpack.config.js</h3><p>在这里如果项目中没有 webpack.config.js 此文件的，可以执行<code>npm run eject</code>，如果执行报错，则执行以下命令</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"init"</span></span><br><span class="line">npm run eject</span><br></pre></td></tr></tbody></table></figure><p>在 webpack.config.js 文件中是可以看到对 sass 的配置的，在 sass 配置的后面复制一份，改成 less 的配置就可以了。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// style files regexes</span></span><br><span class="line"><span class="keyword">const</span> cssRegex = <span class="regexp">/\.css$/</span>;</span><br><span class="line"><span class="keyword">const</span> cssModuleRegex = <span class="regexp">/\.module\.css$/</span>;</span><br><span class="line"><span class="keyword">const</span> sassRegex = <span class="regexp">/\.(scss|sass)$/</span>;</span><br><span class="line"><span class="keyword">const</span> sassModuleRegex = <span class="regexp">/\.module\.(scss|sass)$/</span>;</span><br><span class="line"><span class="comment">//新建less配置：</span></span><br><span class="line"><span class="keyword">const</span> lessRegex = <span class="regexp">/\.(less|less)$/</span>;</span><br><span class="line"><span class="keyword">const</span> lessModuleRegex = <span class="regexp">/\.module\.(less|less)$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在module中找到rules下的oneOf 并在sass后添加如下配置</span></span><br><span class="line">{</span><br><span class="line">  <span class="attr">test</span>: lessRegex,</span><br><span class="line">  <span class="attr">exclude</span>: lessModuleRegex,</span><br><span class="line">  <span class="attr">use</span>: <span class="title function_">getStyleLoaders</span>(</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">importLoaders</span>: <span class="number">3</span>,</span><br><span class="line">      <span class="attr">sourceMap</span>: isEnvProduction</span><br><span class="line">        ? shouldUseSourceMap</span><br><span class="line">        : isEnvDevelopment,</span><br><span class="line">    },</span><br><span class="line">    <span class="string">'less-loader'</span></span><br><span class="line">  ),</span><br><span class="line">  <span class="attr">sideEffects</span>: <span class="literal">true</span>,</span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">  <span class="attr">test</span>: lessModuleRegex,</span><br><span class="line">  <span class="attr">use</span>: <span class="title function_">getStyleLoaders</span>(</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">importLoaders</span>: <span class="number">3</span>,</span><br><span class="line">      <span class="attr">sourceMap</span>: isEnvProduction</span><br><span class="line">        ? shouldUseSourceMap</span><br><span class="line">        : isEnvDevelopment,</span><br><span class="line">      <span class="attr">modules</span>: {</span><br><span class="line">        <span class="attr">getLocalIdent</span>: getCSSModuleLocalIdent,</span><br><span class="line">      },</span><br><span class="line">    },</span><br><span class="line">    <span class="string">'less-loader'</span></span><br><span class="line">  ),</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3、配置后运行报错-TypeError-this-getOptions-is-not-a-function"><a href="#3、配置后运行报错-TypeError-this-getOptions-is-not-a-function" class="headerlink" title="3、配置后运行报错 TypeError:this.getOptions is not a function"></a>3、配置后运行报错 TypeError:this.getOptions is not a function</h3><p>错误原因：8.0+版本的 less-loader 的配置方法发生了变化，导致报错<br>解决方法：安装低版本的 less-loader</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用npm</span></span><br><span class="line"> npm install less-loader@<span class="number">5.0</span><span class="number">.0</span> -D</span><br><span class="line"> <span class="comment">// 使用 yarn</span></span><br><span class="line"> yarn add  less-loader@<span class="number">5.0</span><span class="number">.0</span> -D</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在使用 create-react-app 时发现不支持 less，需更手动更改。&lt;/p&gt;
&lt;h3 id=&quot;1、下载-less-less-loader&quot;&gt;&lt;a href=&quot;#1、下载-less-less-loader&quot; class=&quot;headerlink&quot; title=&quot;1、</summary>
      
    
    
    
    <category term="React - 文章分类" scheme="https://kaisailu-with-ice.gitee.io/blog/categories/React-%E6%96%87%E7%AB%A0%E5%88%86%E7%B1%BB/"/>
    
    
    <category term="less" scheme="https://kaisailu-with-ice.gitee.io/blog/tags/less/"/>
    
  </entry>
  
</feed>
